{
  "glass-nav": {
    "tasks": [
      {
        "id": 1,
        "title": "Implement Geolocation Permission Modal",
        "description": "Create a modal that requests geolocation permission on first visit",
        "details": "Use React state to track first visit status. Display a toast notification with 'Show my location' button. When clicked, trigger browser geolocation request. Store user preference in localStorage to avoid repeated prompts. Ensure modal is accessible with ARIA labels and keyboard navigation.",
        "testStrategy": "Unit test state transitions for first visit, permission prompt display, and localStorage storage. Integration test modal visibility and button click behavior.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Create Location Card Component",
        "description": "Develop the location card with responsive design and theme parity",
        "details": "Build a responsive card component that adjusts size based on screen width. Implement light/dark theme compatibility using Next.js theme context. Add CSS for floating layout on large screens and stacking on smaller screens. Ensure card occupies 90% width on mobile with height 160px.",
        "testStrategy": "Test responsive layout across breakpoints. Verify theme switching behavior and card dimensions match Figma spec.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Integrate Mapbox GL JS for Map Rendering",
        "description": "Set up Mapbox GL JS to display the current location map",
        "details": "Use dynamic import to lazy-load Mapbox GL JS bundle. Initialize map container with Mapbox token. Set up map view with default zoom and center. Add blue pulsing pin for user location. Implement responsive map container with CSS media queries.",
        "testStrategy": "Verify map renders correctly on different screen sizes. Test pin animation and map container responsiveness.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Implement Geolocation Watch Position",
        "description": "Request and maintain real-time location updates",
        "details": "Use navigator.geolocation.watchPosition() to get continuous location updates. Throttle updates to 1 Hz and ignore movements < 5m to reduce re-renders. Store coordinates in React context for component access. Implement clearWatch on component unmount to stop tracking.",
        "testStrategy": "Test real-time updates with mock geolocation data. Verify update throttling and movement filtering logic.",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Add Reverse Geocoding for Address Display",
        "description": "Convert coordinates to readable address",
        "details": "Use Mapbox Geocoding API to reverse-geocode coordinates. Cache result in session storage for single session use. Display address in card subtitle. Handle errors and fallback to static world graphic.",
        "testStrategy": "Test geocoding API calls and cache behavior. Verify address display and fallback mechanisms.",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Implement Fallback for Location Unavailability",
        "description": "Show static world graphic when location is unavailable",
        "details": "Display a static world map image when geolocation is denied or unavailable. Show 'Location unavailable' message. Ensure fallback is visually distinct from active map state. Maintain responsive design for all screen sizes.",
        "testStrategy": "Test fallback display under different geolocation scenarios. Verify visual distinction and responsive behavior.",
        "priority": "high",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Add Real-Time Position Updates",
        "description": "Update position in real time with low latency",
        "details": "Implement continuous position updates with â‰¤ 1s latency. Use Mapbox GL JS to update map center and pin position. Optimize rendering performance with throttling and movement filtering. Ensure smooth animation for position changes.",
        "testStrategy": "Test real-time updates with simulated location changes. Verify latency and animation smoothness across different devices.",
        "priority": "high",
        "dependencies": [
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Implement Accessibility Features",
        "description": "Ensure location card is accessible to all users",
        "details": "Add ARIA labels for 'User location map' and pin icon. Ensure keyboard navigation works for all interactive elements. Test color contrast against map style for pin icon. Add screen reader descriptions for map elements.",
        "testStrategy": "Run accessibility tests with Axe-core. Verify keyboard navigation and screen reader compatibility.",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Add Contextual Call-to-Action for Remote Connection",
        "description": "Display CTA if user is far from Dallas",
        "details": "Calculate distance between user location and Dallas coordinates. If > 50 km, show 'ðŸ‘‹ Letâ€™s connect remotely!' message. Ensure CTA is visually distinct and accessible. Update CTA based on location changes.",
        "testStrategy": "Test distance calculation logic and CTA display. Verify visual and accessibility compliance.",
        "priority": "medium",
        "dependencies": [
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Implement Privacy Policy and Legal Compliance",
        "description": "Update privacy policy and ensure data handling compliance",
        "details": "Update privacy policy section to explain location data usage. Add user control over location tracking preferences. Ensure no location data is transmitted to backend. Verify Content Security Policy for third-party APIs.",
        "testStrategy": "Verify privacy policy updates and legal review status. Test data handling and security policies.",
        "priority": "high",
        "dependencies": [
          9
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-08-06T19:20:00.422Z",
      "updated": "2025-08-06T19:20:00.422Z",
      "description": "Tasks for glass-nav context"
    }
  },
  "portfolio-enhancement": {
    "tasks": [
      {
        "id": 2,
        "title": "Implement Sticky Navigation with Scroll Compression",
        "description": "Create a sticky navigation bar that reduces height as the user scrolls down the page.",
        "details": "Use React state to track scroll position and dynamically adjust the navbar height. Implement IntersectionObserver to highlight the active section in the navbar. Ensure the navbar remains visible on all screen sizes and adapts to mobile views.",
        "testStrategy": "Manually scroll the page and verify the navbar height changes. Check that the active section is highlighted correctly. Test on different screen sizes to ensure responsiveness.",
        "priority": "high",
        "dependencies": [],
        "status": "in-progress",
        "subtasks": [
          {
            "id": 1,
            "title": "Create scroll position tracking hook",
            "description": "Implement a custom React hook to track scroll position and determine when to compress the navigation",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 2
          },
          {
            "id": 2,
            "title": "Update GlassNav component for height compression",
            "description": "Modify the existing GlassNav component to dynamically adjust its height based on scroll position",
            "details": "",
            "status": "in-progress",
            "dependencies": [],
            "parentTaskId": 2
          },
          {
            "id": 3,
            "title": "Add IntersectionObserver for active section highlighting",
            "description": "Implement IntersectionObserver to detect which section is currently in view and highlight it in the navigation",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 2
          }
        ]
      },
      {
        "id": 3,
        "title": "Design Hero Section with Two CTAs",
        "description": "Create a hero section with two calls-to-action buttons: 'View My Work' and 'Download RÃ©sumÃ©'.",
        "details": "Use TailwindCSS for styling and ensure the buttons are visually distinct. Implement the 'View My Work' CTA to scroll to the projects section. The 'Download RÃ©sumÃ©' CTA should trigger a download of the PDF resume.",
        "testStrategy": "Verify that the buttons are styled correctly and functional. Check that the 'View My Work' CTA scrolls to the projects section and the 'Download RÃ©sumÃ©' CTA downloads the PDF.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Implement Project Cards with Tech Tags",
        "description": "Create project cards that display title, one-line metric-based result, tech tags, and Live/Code buttons.",
        "details": "Use TailwindCSS for styling and ensure cards are responsive. Include a 'Live' button to open the project in a new tab and a 'Code' button to link to the GitHub repository. Add tech tags to indicate the technologies used in each project.",
        "testStrategy": "Verify that each card is styled correctly and that the buttons function as expected. Check that tech tags are displayed and that the links open correctly.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Create Case Study Pages for Each Project",
        "description": "Develop dedicated case study pages for each project with sections for Problem, Approach, Tech, Role, Metrics, and Links.",
        "details": "Use Next.js for dynamic routing to create individual pages for each project. Structure each page with the specified sections and ensure consistent styling across all case study pages.",
        "testStrategy": "Verify that each project has its own page and that all sections are present and styled correctly. Check that navigation between case study pages is smooth and functional.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Optimize Typography with next/font",
        "description": "Implement a 3-tone color palette and use Inter/Geist for body text and Spectral for headings.",
        "details": "Use next/font to load Inter, Geist, and Spectral fonts with appropriate subsets. Ensure the color palette is consistent across the site and meets WCAG 2.1 AA contrast compliance.",
        "testStrategy": "Verify that the fonts are loaded correctly and that the color palette is consistent. Check that the contrast ratios meet WCAG 2.1 AA standards.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Implement Image Optimization with next/image",
        "description": "Optimize all images using next/image with defined width/height, priority for hero images, and sizes for responsive scaling.",
        "details": "Use next/image to load images with specified width and height. Set priority for hero images and define sizes for responsive scaling. Compress images to 60â€“70 quality and use AVIF/WebP formats.",
        "testStrategy": "Verify that images are loaded correctly and that the responsive scaling works as expected. Check that the image quality and formats meet the specified requirements.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Implement Font Optimization",
        "description": "Optimize fonts by preloading, subsetting, and using WOFF2 format with display: swap.",
        "details": "Preload fonts using the link tag with rel='preload'. Subset fonts to only include necessary characters. Use WOFF2 format and set display: swap to ensure fonts are loaded efficiently.",
        "testStrategy": "Verify that fonts are preloaded and loaded correctly. Check that the font subsets and formats meet the specified requirements.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Implement JavaScript Optimization",
        "description": "Optimize JavaScript by using React Server Components where possible and dynamic imports for non-critical libraries.",
        "details": "Use React Server Components to reduce client-side JavaScript. Implement dynamic imports for non-critical libraries to load them on demand. Ensure that the code is optimized for performance.",
        "testStrategy": "Verify that React Server Components are used correctly and that non-critical libraries are dynamically imported. Check that the code is optimized for performance.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Implement Preconnect and DNS-Prefetch",
        "description": "Add preconnect and DNS-prefetch tags for fonts and analytics to improve load times.",
        "details": "Add preconnect tags for fonts and analytics services. Use DNS-prefetch to speed up domain resolution. Ensure that these tags are included in the HTML head section.",
        "testStrategy": "Verify that preconnect and DNS-prefetch tags are present in the HTML head. Check that they are correctly configured for fonts and analytics.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Prevent Layout Shifts (CLS)",
        "description": "Ensure all media elements have defined width/height or aspect-ratio to prevent layout shifts.",
        "details": "Set width and height attributes for all images and videos. Use aspect-ratio for responsive media elements. Ensure that the layout is stable and does not shift during page load.",
        "testStrategy": "Verify that all media elements have defined width/height or aspect-ratio. Check that the layout is stable and does not shift during page load.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Implement Mobile Optimization",
        "description": "Ensure the site is optimized for mobile devices with safe-area insets, â‰¥44px tap targets, and prefers-reduced-motion support.",
        "details": "Use TailwindCSS to ensure safe-area insets are applied. Ensure all tap targets are at least 44px in size. Support reduced motion preferences to avoid animations on mobile devices.",
        "testStrategy": "Verify that the site is optimized for mobile devices. Check that safe-area insets are applied, tap targets are â‰¥44px, and reduced motion preferences are supported.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Implement Contact Form with Inline Validation",
        "description": "Create a contact form with inline validation, success/failure states, and a mailto fallback.",
        "details": "Use React Hook Form for inline validation. Implement success and failure states for form submission. Include a mailto fallback in case the form submission fails. Ensure the form is accessible and meets accessibility standards.",
        "testStrategy": "Verify that the form is styled correctly and that inline validation works. Check that success and failure states are displayed correctly. Ensure that the mailto fallback is functional.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Set Up Vercel Hosting with ISR",
        "description": "Deploy the site to Vercel with Incremental Static Regeneration (ISR) for static pages.",
        "details": "Configure the project in Vercel and enable ISR for static pages. Ensure that the site is optimized for performance and that static pages are regenerated efficiently.",
        "testStrategy": "Verify that the site is deployed correctly on Vercel. Check that ISR is enabled and that static pages are regenerated efficiently.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Implement Analytics and Monitoring",
        "description": "Set up Vercel Speed Insights and Google Analytics for performance and user tracking.",
        "details": "Integrate Vercel Speed Insights and Google Analytics into the site. Ensure that the analytics and monitoring tools are configured correctly and that data is collected accurately.",
        "testStrategy": "Verify that Vercel Speed Insights and Google Analytics are integrated correctly. Check that data is collected accurately and that the tools are configured properly.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-08-06T19:31:15.630Z",
      "updated": "2025-08-11T00:18:01.309Z",
      "description": "Tasks for portfolio-enhancement context"
    }
  },
  "master": {
    "tasks": [
      {
        "id": 2,
        "title": "Implement Sticky Navigation with Scroll Compression",
        "description": "Create a sticky navigation bar that reduces height as the user scrolls down the page.",
        "details": "Use React state to track scroll position and dynamically adjust the navbar height. Implement IntersectionObserver to highlight the active section in the navbar. Ensure the navbar remains visible on all screen sizes and adapts to mobile views.",
        "testStrategy": "Manually scroll the page and verify the navbar height changes. Check that the active section is highlighted correctly. Test on different screen sizes to ensure responsiveness.",
        "priority": "high",
        "dependencies": [],
        "status": "in-progress",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Design Hero Section with Two CTAs",
        "description": "Create a hero section with two calls-to-action buttons: 'View My Work' and 'Download RÃ©sumÃ©'.",
        "details": "Use TailwindCSS for styling and ensure the buttons are visually distinct. Implement the 'View My Work' CTA to scroll to the projects section. The 'Download RÃ©sumÃ©' CTA should trigger a download of the PDF resume.",
        "testStrategy": "Verify that the buttons are styled correctly and functional. Check that the 'View My Work' CTA scrolls to the projects section and the 'Download RÃ©sumÃ©' CTA downloads the PDF.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Implement Project Cards with Tech Tags",
        "description": "Create project cards that display title, one-line metric-based result, tech tags, and Live/Code buttons.",
        "details": "Use TailwindCSS for styling and ensure cards are responsive. Include a 'Live' button to open the project in a new tab and a 'Code' button to link to the GitHub repository. Add tech tags to indicate the technologies used in each project.",
        "testStrategy": "Verify that each card is styled correctly and that the buttons function as expected. Check that tech tags are displayed and that the links open correctly.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Create Case Study Pages for Each Project",
        "description": "Develop dedicated case study pages for each project with sections for Problem, Approach, Tech, Role, Metrics, and Links.",
        "details": "Use Next.js for dynamic routing to create individual pages for each project. Structure each page with the specified sections and ensure consistent styling across all case study pages.",
        "testStrategy": "Verify that each project has its own page and that all sections are present and styled correctly. Check that navigation between case study pages is smooth and functional.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Optimize Typography with next/font",
        "description": "Implement a 3-tone color palette and use Inter/Geist for body text and Spectral for headings.",
        "details": "Use next/font to load Inter, Geist, and Spectral fonts with appropriate subsets. Ensure the color palette is consistent across the site and meets WCAG 2.1 AA contrast compliance.",
        "testStrategy": "Verify that the fonts are loaded correctly and that the color palette is consistent. Check that the contrast ratios meet WCAG 2.1 AA standards.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Implement Image Optimization with next/image",
        "description": "Optimize all images using next/image with defined width/height, priority for hero images, and sizes for responsive scaling.",
        "details": "Use next/image to load images with specified width and height. Set priority for hero images and define sizes for responsive scaling. Compress images to 60â€“70 quality and use AVIF/WebP formats.",
        "testStrategy": "Verify that images are loaded correctly and that the responsive scaling works as expected. Check that the image quality and formats meet the specified requirements.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Implement Font Optimization",
        "description": "Optimize fonts by preloading, subsetting, and using WOFF2 format with display: swap.",
        "details": "Preload fonts using the link tag with rel='preload'. Subset fonts to only include necessary characters. Use WOFF2 format and set display: swap to ensure fonts are loaded efficiently.",
        "testStrategy": "Verify that fonts are preloaded and loaded correctly. Check that the font subsets and formats meet the specified requirements.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Implement JavaScript Optimization",
        "description": "Optimize JavaScript by using React Server Components where possible and dynamic imports for non-critical libraries.",
        "details": "Use React Server Components to reduce client-side JavaScript. Implement dynamic imports for non-critical libraries to load them on demand. Ensure that the code is optimized for performance.",
        "testStrategy": "Verify that React Server Components are used correctly and that non-critical libraries are dynamically imported. Check that the code is optimized for performance.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Implement Preconnect and DNS-Prefetch",
        "description": "Add preconnect and DNS-prefetch tags for fonts and analytics to improve load times.",
        "details": "Add preconnect tags for fonts and analytics services. Use DNS-prefetch to speed up domain resolution. Ensure that these tags are included in the HTML head section.",
        "testStrategy": "Verify that preconnect and DNS-prefetch tags are present in the HTML head. Check that they are correctly configured for fonts and analytics.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Prevent Layout Shifts (CLS)",
        "description": "Ensure all media elements have defined width/height or aspect-ratio to prevent layout shifts.",
        "details": "Set width and height attributes for all images and videos. Use aspect-ratio for responsive media elements. Ensure that the layout is stable and does not shift during page load.",
        "testStrategy": "Verify that all media elements have defined width/height or aspect-ratio. Check that the layout is stable and does not shift during page load.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Implement Mobile Optimization",
        "description": "Ensure the site is optimized for mobile devices with safe-area insets, â‰¥44px tap targets, and prefers-reduced-motion support.",
        "details": "Use TailwindCSS to ensure safe-area insets are applied. Ensure all tap targets are at least 44px in size. Support reduced motion preferences to avoid animations on mobile devices.",
        "testStrategy": "Verify that the site is optimized for mobile devices. Check that safe-area insets are applied, tap targets are â‰¥44px, and reduced motion preferences are supported.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Implement Contact Form with Inline Validation",
        "description": "Create a contact form with inline validation, success/failure states, and a mailto fallback.",
        "details": "Use React Hook Form for inline validation. Implement success and failure states for form submission. Include a mailto fallback in case the form submission fails. Ensure the form is accessible and meets accessibility standards.",
        "testStrategy": "Verify that the form is styled correctly and that inline validation works. Check that success and failure states are displayed correctly. Ensure that the mailto fallback is functional.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Set Up Vercel Hosting with ISR",
        "description": "Deploy the site to Vercel with Incremental Static Regeneration (ISR) for static pages.",
        "details": "Configure the project in Vercel and enable ISR for static pages. Ensure that the site is optimized for performance and that static pages are regenerated efficiently.",
        "testStrategy": "Verify that the site is deployed correctly on Vercel. Check that ISR is enabled and that static pages are regenerated efficiently.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Implement Analytics and Monitoring",
        "description": "Set up Vercel Speed Insights and Google Analytics for performance and user tracking.",
        "details": "Integrate Vercel Speed Insights and Google Analytics into the site. Ensure that the analytics and monitoring tools are configured correctly and that data is collected accurately.",
        "testStrategy": "Verify that Vercel Speed Insights and Google Analytics are integrated correctly. Check that data is collected accurately and that the tools are configured properly.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-08-06T19:31:15.630Z",
      "updated": "2025-08-11T00:06:06.955Z",
      "description": "Tasks for portfolio-enhancement context"
    }
  }
}